package lazyman;

import GameObj.Game;
import GameObj.League;
import Objects.Proxy;
import Objects.Streamlink;
import Objects.Time;
import Objects.Web;
import Util.AutoUpdate;
import Util.CenterTextCellRenderer;
import Util.EditHosts;
import Util.IconTextCellRemderer;
import Util.MessageBox;
import Util.Console.MessageConsole;
import Util.OpenURL;
import Util.ProcessReader;
import Util.Props;
import Util.InfiniteBar;
import java.awt.Color;
import java.awt.Toolkit;
import java.awt.event.KeyEvent;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.io.IOException;
import java.net.UnknownHostException;
import java.nio.file.Paths;
import java.util.Scanner;
import java.util.TimerTask;
import javax.swing.JTextField;
import javax.swing.SwingWorker;
import java.util.Timer;
import javax.swing.table.DefaultTableModel;

public final class MainGUI extends javax.swing.JFrame {

    private final Streamlink streamlink;
    private final League[] leagues;
    private boolean gettingFeeds;
    private Proxy p;
    private int streamCnt;

    public MainGUI() {
        initComponents();
        checkUpdate();
        p = new Proxy(Props.getProxyPort());
        p.run();
        streamCnt = 0;
        gettingFeeds = false;
        streamlink = new Streamlink();
        getVLCLocation();
        leagues = new League[leaguesTabbedPane.getTabCount() - 1];
        for (int i = 0; i < leaguesTabbedPane.getTabCount() - 1; i++) {
            leagues[i] = new League();
        }
        leagues[0].setTable(NHLGameTable);
        leagues[0].setDateTF(NHLDateTF);
        leagues[0].setKeyURL("mf.svc.nhl.com");
        leagues[1].setTable(MLBGameTable);
        leagues[1].setDateTF(MLBDateTF);
        leagues[1].setKeyURL("playback.svcs.mlb.com");

        for (int i = 0; i < leaguesTabbedPane.getTabCount() - 1; i++) {
            leagues[i].setName(leaguesTabbedPane.getTitleAt(i));
            leagues[i].setDate(Time.getPSTDate("yyyy-MM-dd"));
            leagues[i].getDateTF().setDate(Time.getPSTDate1("MMM dd, yyyy"));
            leagues[i].setFavoriteTeam(Props.getFavTeam(leagues[i].getName()));
        }
        if (System.getProperty("os.name").toLowerCase().contains("win")) {
            changePasswordMI.setVisible(false);
        }
        else if (System.getProperty("os.name").toLowerCase().contains("mac")) {
            /*com.apple.eawt.Application application = com.apple.eawt.Application.getApplication();
            application.addPreferencesMenuItem();
            application.setEnabledPreferencesMenu(true);*/
            changePasswordMI.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_G, java.awt.event.InputEvent.META_MASK));
            exitMI.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Q, java.awt.event.InputEvent.META_MASK));
        }
        getSLLoc();
        setButtons();
        new newDay().start();

        MessageConsole console = new MessageConsole(consoleTA);
        console.redirectOut();
        console.redirectErr(Color.RED, null);
    }

    private void checkHosts(String url, League l) {
        EditHosts eh = new EditHosts();
        if (!eh.hostsFileEdited(url)) {
            if (eh.isIpNotFound()) {
                return;
            }
            if (!System.getProperty("os.name").toLowerCase().contains("win") && Props.getPW().equals("")) {
                GetPasswordGUI gp = new GetPasswordGUI(this, true);
                gp.setLocationRelativeTo(this);
                gp.setVisible(true);
            }
            if (!eh.isWrongIP()) {
                if (!eh.hostsFileEdited(url)) {
                    l.setHostsFileEdited(eh.editHosts(url));
                }
            } else {
                l.setHostsFileEdited(eh.modifyHosts(url));
            }
        } else {
            l.setHostsFileEdited(true);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        consolePM = new javax.swing.JPopupMenu();
        mainPanel = new javax.swing.JPanel();
        gameSelectionPanel = new javax.swing.JPanel();
        leaguesTabbedPane = new javax.swing.JTabbedPane();
        nhlPanel = new javax.swing.JPanel();
        nhlDateSelectionPanel = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        NHLDateTF = new com.toedter.calendar.JDateChooser();
        NHLPrevDayBtn = new javax.swing.JButton();
        NHLNextDayBtn = new javax.swing.JButton();
        refreshBtn = new javax.swing.JButton();
        nhlScrollPanel = new javax.swing.JScrollPane();
        NHLGameTable = new javax.swing.JTable();
        mlbPanel = new javax.swing.JPanel();
        mlbDateSelectionPanel = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        MLBDateTF = new com.toedter.calendar.JDateChooser();
        MLBPrevDayBtn = new javax.swing.JButton();
        MLBNextDayBtn = new javax.swing.JButton();
        refreshBtn1 = new javax.swing.JButton();
        mlbScrollPanel = new javax.swing.JScrollPane();
        MLBGameTable = new javax.swing.JTable();
        consoleScrollPane = new javax.swing.JScrollPane();
        consoleTA = new javax.swing.JTextPane();
        consolePanel = new javax.swing.JPanel();
        playOptionsPanel = new javax.swing.JPanel();
        jProgressBar1 = new javax.swing.JProgressBar();
        playOptionSelectionsPanel = new javax.swing.JPanel();
        feedCB = new javax.swing.JComboBox<>();
        qualityCB = new javax.swing.JComboBox<>();
        CDNCB = new javax.swing.JComboBox<>();
        playBtn = new javax.swing.JButton();
        playActionPanel = new javax.swing.JPanel();
        saveStreamCB = new javax.swing.JCheckBox();
        restartCB = new javax.swing.JCheckBox();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        changePasswordMI = new javax.swing.JMenuItem();
        exitMI = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        preferencesMI = new javax.swing.JMenuItem();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenu3 = new javax.swing.JMenu();
        guidesMI = new javax.swing.JMenuItem();
        AboutMI = new javax.swing.JMenuItem();
        updateMI = new javax.swing.JMenuItem();
        donateMI = new javax.swing.JMenu();

        consolePM.setLabel("popupMenu1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("LazyMan");
        setIconImage(Toolkit.getDefaultToolkit().getImage(MainGUI.class.getResource("/Logos/LM.png")));
        setLocationByPlatform(true);
        setPreferredSize(new java.awt.Dimension(648, 512));
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        mainPanel.setMaximumSize(new java.awt.Dimension(32767, 4096));
        mainPanel.setLayout(new javax.swing.BoxLayout(mainPanel, javax.swing.BoxLayout.Y_AXIS));

        gameSelectionPanel.setMaximumSize(new java.awt.Dimension(32767, 2350));
        gameSelectionPanel.setPreferredSize(new java.awt.Dimension(648, 350));
        gameSelectionPanel.setLayout(new java.awt.BorderLayout());

        leaguesTabbedPane.setInheritsPopupMenu(true);
        leaguesTabbedPane.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                leaguesTabbedPaneStateChanged(evt);
            }
        });

        nhlPanel.setLayout(new javax.swing.BoxLayout(nhlPanel, javax.swing.BoxLayout.Y_AXIS));

        nhlDateSelectionPanel.setMaximumSize(new java.awt.Dimension(32767, 40));
        nhlDateSelectionPanel.setLayout(new javax.swing.BoxLayout(nhlDateSelectionPanel, javax.swing.BoxLayout.LINE_AXIS));

        jLabel1.setFont(new java.awt.Font("Monospaced", 0, 11)); // NOI18N
        jLabel1.setText("Date:");
        nhlDateSelectionPanel.add(jLabel1);

        NHLDateTF.setDateFormatString("MMM d, yyyy");
        NHLDateTF.setInheritsPopupMenu(true);
        nhlDateSelectionPanel.add(NHLDateTF);
        NHLDateTF.getDateEditor().addPropertyChangeListener(
            "date", new PropertyChangeListener() {
                @Override
                public void propertyChange(PropertyChangeEvent e) {
                    leagues[0].setFavGameSelected(false);
                    leagues[0].setDate(Time.formatDateSched( ((JTextField)NHLDateTF.getDateEditor().getUiComponent()).getText() ));

                    SwingWorker<Void, Void> gg = getGames(0, 0);
                    gg.execute();
                }
            });

            NHLPrevDayBtn.setText("<");
            NHLPrevDayBtn.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    NHLPrevDayBtnActionPerformed(evt);
                }
            });
            nhlDateSelectionPanel.add(NHLPrevDayBtn);

            NHLNextDayBtn.setText(">");
            NHLNextDayBtn.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    NHLNextDayBtnActionPerformed(evt);
                }
            });
            nhlDateSelectionPanel.add(NHLNextDayBtn);

            refreshBtn.setText("Refresh");
            refreshBtn.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    refreshBtnActionPerformed(evt);
                }
            });
            nhlDateSelectionPanel.add(refreshBtn);

            nhlPanel.add(nhlDateSelectionPanel);

            nhlScrollPanel.setPreferredSize(new java.awt.Dimension(453, 200));

            NHLGameTable.setModel(new javax.swing.table.DefaultTableModel(
                new Object [][] {
                    {null, null, null}
                },
                new String [] {
                    "Away", "Home", "Time"
                }
            ) {
                Class[] types = new Class [] {
                    java.lang.Object.class, java.lang.Object.class, java.lang.String.class
                };
                boolean[] canEdit = new boolean [] {
                    false, false, false
                };

                public Class getColumnClass(int columnIndex) {
                    return types [columnIndex];
                }

                public boolean isCellEditable(int rowIndex, int columnIndex) {
                    return canEdit [columnIndex];
                }
            });
            NHLGameTable.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
            NHLGameTable.setRowHeight(26);
            NHLGameTable.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
            NHLGameTable.addMouseListener(new java.awt.event.MouseAdapter() {
                public void mouseClicked(java.awt.event.MouseEvent evt) {
                    NHLGameTableMouseClicked(evt);
                }
            });
            NHLGameTable.addKeyListener(new java.awt.event.KeyAdapter() {
                public void keyReleased(java.awt.event.KeyEvent evt) {
                    NHLGameTableKeyReleased(evt);
                }
            });
            nhlScrollPanel.setViewportView(NHLGameTable);
            if (NHLGameTable.getColumnModel().getColumnCount() > 0) {
                NHLGameTable.getColumnModel().getColumn(0).setHeaderValue("Away");
                NHLGameTable.getColumnModel().getColumn(0).setCellRenderer(new IconTextCellRemderer());
                NHLGameTable.getColumnModel().getColumn(1).setHeaderValue("Home");
                NHLGameTable.getColumnModel().getColumn(1).setCellRenderer(new IconTextCellRemderer());
                NHLGameTable.getColumnModel().getColumn(2).setHeaderValue("Time");
                NHLGameTable.getColumnModel().getColumn(2).setCellRenderer(new CenterTextCellRenderer());
            }
            NHLGameTable.getColumnModel().getColumn(0).setPreferredWidth(200);
            NHLGameTable.getColumnModel().getColumn(1).setPreferredWidth(200);
            NHLGameTable.getColumnModel().getColumn(2).setPreferredWidth(100);

            NHLGameTable.getColumnModel().getColumn(0).setHeaderRenderer(new CenterTextCellRenderer());
            NHLGameTable.getColumnModel().getColumn(1).setHeaderRenderer(new CenterTextCellRenderer());
            NHLGameTable.getColumnModel().getColumn(2).setHeaderRenderer(new CenterTextCellRenderer());

            nhlPanel.add(nhlScrollPanel);

            leaguesTabbedPane.addTab("NHL", nhlPanel);

            mlbPanel.setLayout(new javax.swing.BoxLayout(mlbPanel, javax.swing.BoxLayout.Y_AXIS));

            mlbDateSelectionPanel.setMaximumSize(new java.awt.Dimension(32767, 40));
            mlbDateSelectionPanel.setLayout(new javax.swing.BoxLayout(mlbDateSelectionPanel, javax.swing.BoxLayout.LINE_AXIS));

            jLabel2.setFont(new java.awt.Font("Monospaced", 0, 11)); // NOI18N
            jLabel2.setText("Date:");
            mlbDateSelectionPanel.add(jLabel2);

            MLBDateTF.setDateFormatString("MMM d, yyyy");
            MLBDateTF.setInheritsPopupMenu(true);
            mlbDateSelectionPanel.add(MLBDateTF);
            MLBDateTF.getDateEditor().addPropertyChangeListener(
                "date", new PropertyChangeListener() {
                    @Override
                    public void propertyChange(PropertyChangeEvent e) {
                        leagues[1].setFavGameSelected(false);
                        leagues[1].setDate(Time.formatDateSched( ((JTextField)MLBDateTF.getDateEditor().getUiComponent()).getText() ));

                        SwingWorker<Void, Void> gg = getGames(0, 1);
                        gg.execute();
                    }
                });

                MLBPrevDayBtn.setText("<");
                MLBPrevDayBtn.addActionListener(new java.awt.event.ActionListener() {
                    public void actionPerformed(java.awt.event.ActionEvent evt) {
                        MLBPrevDayBtnActionPerformed(evt);
                    }
                });
                mlbDateSelectionPanel.add(MLBPrevDayBtn);

                MLBNextDayBtn.setText(">");
                MLBNextDayBtn.addActionListener(new java.awt.event.ActionListener() {
                    public void actionPerformed(java.awt.event.ActionEvent evt) {
                        MLBNextDayBtnActionPerformed(evt);
                    }
                });
                mlbDateSelectionPanel.add(MLBNextDayBtn);

                refreshBtn1.setText("Refresh");
                refreshBtn1.addActionListener(new java.awt.event.ActionListener() {
                    public void actionPerformed(java.awt.event.ActionEvent evt) {
                        refreshBtn1ActionPerformed(evt);
                    }
                });
                mlbDateSelectionPanel.add(refreshBtn1);

                mlbPanel.add(mlbDateSelectionPanel);

                MLBGameTable.setModel(new javax.swing.table.DefaultTableModel(
                    new Object [][] {
                        {null, null, null}
                    },
                    new String [] {
                        "Away", "Home", "Time"
                    }
                ) {
                    Class[] types = new Class [] {
                        java.lang.Object.class, java.lang.Object.class, java.lang.String.class
                    };
                    boolean[] canEdit = new boolean [] {
                        false, false, false
                    };

                    public Class getColumnClass(int columnIndex) {
                        return types [columnIndex];
                    }

                    public boolean isCellEditable(int rowIndex, int columnIndex) {
                        return canEdit [columnIndex];
                    }
                });
                MLBGameTable.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
                MLBGameTable.setRowHeight(26);
                MLBGameTable.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
                MLBGameTable.addMouseListener(new java.awt.event.MouseAdapter() {
                    public void mouseClicked(java.awt.event.MouseEvent evt) {
                        MLBGameTableMouseClicked(evt);
                    }
                });
                MLBGameTable.addKeyListener(new java.awt.event.KeyAdapter() {
                    public void keyReleased(java.awt.event.KeyEvent evt) {
                        MLBGameTableKeyReleased(evt);
                    }
                });
                mlbScrollPanel.setViewportView(MLBGameTable);
                if (MLBGameTable.getColumnModel().getColumnCount() > 0) {
                    MLBGameTable.getColumnModel().getColumn(0).setCellRenderer(new IconTextCellRemderer());
                    MLBGameTable.getColumnModel().getColumn(1).setCellRenderer(new IconTextCellRemderer());
                    MLBGameTable.getColumnModel().getColumn(2).setCellRenderer(new CenterTextCellRenderer());
                }
                MLBGameTable.getColumnModel().getColumn(0).setPreferredWidth(200);
                MLBGameTable.getColumnModel().getColumn(1).setPreferredWidth(200);
                MLBGameTable.getColumnModel().getColumn(2).setPreferredWidth(100);

                MLBGameTable.getColumnModel().getColumn(0).setHeaderRenderer(new CenterTextCellRenderer());
                MLBGameTable.getColumnModel().getColumn(1).setHeaderRenderer(new CenterTextCellRenderer());
                MLBGameTable.getColumnModel().getColumn(2).setHeaderRenderer(new CenterTextCellRenderer());

                mlbPanel.add(mlbScrollPanel);

                leaguesTabbedPane.addTab("MLB", mlbPanel);

                consoleScrollPane.setBorder(null);

                consoleTA.setEditable(false);
                consoleTA.setBackground(new java.awt.Color(0, 0, 0));
                consoleTA.setForeground(new java.awt.Color(255, 255, 255));
                consoleTA.setDoubleBuffered(true);
                consoleTA.setMaximumSize(new java.awt.Dimension(8, 21));
                consoleScrollPane.setViewportView(consoleTA);
                consoleTA.addMouseListener(new PopupListener(consolePM));

                leaguesTabbedPane.addTab("Log", consoleScrollPane);

                gameSelectionPanel.add(leaguesTabbedPane, java.awt.BorderLayout.CENTER);

                mainPanel.add(gameSelectionPanel);

                consolePanel.setLayout(new javax.swing.BoxLayout(consolePanel, javax.swing.BoxLayout.Y_AXIS));
                mainPanel.add(consolePanel);

                playOptionsPanel.setMaximumSize(new java.awt.Dimension(32767, 74));

                jProgressBar1.setPreferredSize(new java.awt.Dimension(64, 12));
                playOptionsPanel.add(jProgressBar1);

                playOptionSelectionsPanel.setLayout(new javax.swing.BoxLayout(playOptionSelectionsPanel, javax.swing.BoxLayout.LINE_AXIS));

                feedCB.setBorder(javax.swing.BorderFactory.createTitledBorder("Feed"));
                feedCB.addItemListener(new java.awt.event.ItemListener() {
                    public void itemStateChanged(java.awt.event.ItemEvent evt) {
                        feedCBItemStateChanged(evt);
                    }
                });
                playOptionSelectionsPanel.add(feedCB);

                qualityCB.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "360p", "540p", "720p", "720p60" }));
                qualityCB.setBorder(javax.swing.BorderFactory.createTitledBorder("Quality"));
                qualityCB.addItemListener(new java.awt.event.ItemListener() {
                    public void itemStateChanged(java.awt.event.ItemEvent evt) {
                        qualityCBItemStateChanged(evt);
                    }
                });
                playOptionSelectionsPanel.add(qualityCB);

                CDNCB.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Akamai", "Level 3" }));
                CDNCB.setBorder(javax.swing.BorderFactory.createTitledBorder("CDN"));
                CDNCB.addItemListener(new java.awt.event.ItemListener() {
                    public void itemStateChanged(java.awt.event.ItemEvent evt) {
                        CDNCBItemStateChanged(evt);
                    }
                });
                playOptionSelectionsPanel.add(CDNCB);

                playOptionsPanel.add(playOptionSelectionsPanel);

                playBtn.setMnemonic(KeyEvent.VK_P);
                playBtn.setText("Play");
                playBtn.setEnabled(false);
                playBtn.setPreferredSize(new java.awt.Dimension(80, 40));
                playBtn.addActionListener(new java.awt.event.ActionListener() {
                    public void actionPerformed(java.awt.event.ActionEvent evt) {
                        playBtnActionPerformed(evt);
                    }
                });
                playOptionsPanel.add(playBtn);

                playActionPanel.setLayout(new java.awt.GridBagLayout());

                saveStreamCB.setMnemonic(KeyEvent.VK_V);
                saveStreamCB.setText("Save stream");
                saveStreamCB.setEnabled(false);
                saveStreamCB.addActionListener(new java.awt.event.ActionListener() {
                    public void actionPerformed(java.awt.event.ActionEvent evt) {
                        saveStreamCBActionPerformed(evt);
                    }
                });
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 1;
                gridBagConstraints.gridy = 0;
                gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
                playActionPanel.add(saveStreamCB, gridBagConstraints);

                restartCB.setMnemonic(KeyEvent.VK_R);
                restartCB.setText("Restart");
                restartCB.addActionListener(new java.awt.event.ActionListener() {
                    public void actionPerformed(java.awt.event.ActionEvent evt) {
                        restartCBActionPerformed(evt);
                    }
                });
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 1;
                gridBagConstraints.gridy = 1;
                gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
                playActionPanel.add(restartCB, gridBagConstraints);

                playOptionsPanel.add(playActionPanel);

                mainPanel.add(playOptionsPanel);

                getContentPane().add(mainPanel, java.awt.BorderLayout.CENTER);

                jMenu1.setMnemonic(KeyEvent.VK_F);
                jMenu1.setText("File");

                changePasswordMI.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_C, java.awt.event.InputEvent.ALT_MASK | java.awt.event.InputEvent.CTRL_MASK));
                changePasswordMI.setText("Change Password");
                changePasswordMI.addActionListener(new java.awt.event.ActionListener() {
                    public void actionPerformed(java.awt.event.ActionEvent evt) {
                        changePasswordMIActionPerformed(evt);
                    }
                });
                jMenu1.add(changePasswordMI);

                exitMI.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F4, java.awt.event.InputEvent.ALT_MASK));
                exitMI.setText("Exit");
                exitMI.addActionListener(new java.awt.event.ActionListener() {
                    public void actionPerformed(java.awt.event.ActionEvent evt) {
                        exitMIActionPerformed(evt);
                    }
                });
                jMenu1.add(exitMI);

                jMenuBar1.add(jMenu1);

                jMenu2.setMnemonic(KeyEvent.VK_E);
                jMenu2.setText("Edit");

                preferencesMI.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_P, java.awt.event.InputEvent.CTRL_MASK));
                preferencesMI.setText("Preferences");
                preferencesMI.addActionListener(new java.awt.event.ActionListener() {
                    public void actionPerformed(java.awt.event.ActionEvent evt) {
                        preferencesMIActionPerformed(evt);
                    }
                });
                jMenu2.add(preferencesMI);

                jMenuItem1.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_I, java.awt.event.InputEvent.CTRL_MASK));
                jMenuItem1.setText("Change IP");
                jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
                    public void actionPerformed(java.awt.event.ActionEvent evt) {
                        jMenuItem1ActionPerformed(evt);
                    }
                });
                jMenu2.add(jMenuItem1);

                jMenuItem2.setText("Clear Hosts File");
                jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
                    public void actionPerformed(java.awt.event.ActionEvent evt) {
                        jMenuItem2ActionPerformed(evt);
                    }
                });
                jMenu2.add(jMenuItem2);

                jMenuBar1.add(jMenu2);

                jMenu3.setMnemonic(KeyEvent.VK_H);
                jMenu3.setText("Help");

                guidesMI.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_G, java.awt.event.InputEvent.CTRL_MASK));
                guidesMI.setText("Guides");
                guidesMI.addActionListener(new java.awt.event.ActionListener() {
                    public void actionPerformed(java.awt.event.ActionEvent evt) {
                        guidesMIActionPerformed(evt);
                    }
                });
                jMenu3.add(guidesMI);

                AboutMI.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_A, java.awt.event.InputEvent.ALT_MASK | java.awt.event.InputEvent.CTRL_MASK));
                AboutMI.setText("About");
                AboutMI.addActionListener(new java.awt.event.ActionListener() {
                    public void actionPerformed(java.awt.event.ActionEvent evt) {
                        AboutMIActionPerformed(evt);
                    }
                });
                jMenu3.add(AboutMI);

                updateMI.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_U, java.awt.event.InputEvent.CTRL_MASK));
                updateMI.setText("Update Available");
                updateMI.addActionListener(new java.awt.event.ActionListener() {
                    public void actionPerformed(java.awt.event.ActionEvent evt) {
                        updateMIActionPerformed(evt);
                    }
                });
                jMenu3.add(updateMI);

                jMenuBar1.add(jMenu3);

                donateMI.setText("Donate");
                donateMI.addMouseListener(new java.awt.event.MouseAdapter() {
                    public void mouseClicked(java.awt.event.MouseEvent evt) {
                        donateMIMouseClicked(evt);
                    }
                });
                jMenuBar1.add(donateMI);

                setJMenuBar(jMenuBar1);

                pack();
            }// </editor-fold>//GEN-END:initComponents

    private void exitMIActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitMIActionPerformed
        formWindowClosing(null);
    }//GEN-LAST:event_exitMIActionPerformed

    private void saveStreamCBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveStreamCBActionPerformed
        if (!playBtn.getText().equals("Stop Recording")) {
            if (saveStreamCB.isSelected()) {
                playBtn.setText("Record");
            } else {
                playBtn.setText("Play");
            }
        }

        streamlink.record = saveStreamCB.isSelected();
    }//GEN-LAST:event_saveStreamCBActionPerformed

    private void playBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_playBtnActionPerformed
        if (!playBtn.isEnabled()) {
            return;
        }
        jProgressBar1.setIndeterminate(true);

        if (streamlink.getLocation() == null || streamlink.getLocation().equals("")) {
            getSLLoc();

            if (streamlink.getLocation() == null || streamlink.getLocation().equals("")) {
                MessageBox.show("Streamlink was not set! It is required to stream games.", "Streamlink not set", 2);
                jProgressBar1.setIndeterminate(false);
                return;
            }
        }

        if (leagues[leaguesTabbedPane.getSelectedIndex()].getGwi().getUrl().endsWith("n/a")) {
            MessageBox.show("The stream has expired. Ask StevensNJD4 to make it available.", "Not Available", 0);
            jProgressBar1.setIndeterminate(false);
            return;
        }

        if (playBtn.getText().equals("Stop Recording")) {
            leagues[leaguesTabbedPane.getSelectedIndex()].setStreamlinkSwitch(-1);

            if (saveStreamCB.isSelected()) {
                playBtn.setText("Record");
            } else {
                playBtn.setText("Play");
            }
            return;
        }

        if (saveStreamCB.isSelected()) {
            leagues[leaguesTabbedPane.getSelectedIndex()].setStreamlinkSwitch(1);
            playBtn.setText("Stop Recording");
        } else {
            leagues[leaguesTabbedPane.getSelectedIndex()].setStreamlinkSwitch(0);
        }

        SwingWorker<Void, Void> pl = playGame(leaguesTabbedPane.getSelectedIndex());
        pl.execute();
    }//GEN-LAST:event_playBtnActionPerformed

    private void preferencesMIActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_preferencesMIActionPerformed
        int refresh = Props.getRefreshRate();

        Options op = new Options(this, true);
        op.setLocationRelativeTo(this);
        op.setVisible(true);

        if (p.getPort() != Props.getProxyPort()) {
            MessageBox.show("Port will be changed on next launch.", "Port change", 1);
        }

        for (int i = 0; i < leaguesTabbedPane.getTabCount() - 1; i++) {
            leagues[i].setFavoriteTeam(Props.getFavTeam(leagues[i].getName()));

            if (!leagues[i].getTable().getModel().getValueAt(0, 0).equals("None")) {
                if (leagues[i].getName().equals(leaguesTabbedPane.getTitleAt(leaguesTabbedPane.getSelectedIndex()))) {
                    int idx = leagues[i].getSelectedGame();
                    setRow(idx, i);
                    setFeed(idx, 'a');
                }
                if (Props.getRefreshRate() != refresh) {
                    refresh = Props.getRefreshRate();

                    if (refresh == 0 && leagues[i].getTimer() != null) {
                        leagues[i].getTimer().cancel();
                        leagues[i].setTimer(null);
                    } else if (refresh > 0 && leagues[i].getTimer() != null) {
                        leagues[i].getTimer().cancel();
                        leagues[i].getTimer().scheduleAtFixedRate(new Refresh(i), Props.getRefreshRate() * 60 * 1000, Props.getRefreshRate() * 60 * 1000);
                    } else if (refresh > 0 && leagues[i].getTimer() == null) {
                        leagues[i].setTimer(new Timer());
                        leagues[i].getTimer().scheduleAtFixedRate(new Refresh(i), Props.getRefreshRate() * 60 * 1000, Props.getRefreshRate() * 60 * 1000);
                    }
                }
            }
        }
    }//GEN-LAST:event_preferencesMIActionPerformed

    private void changePasswordMIActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_changePasswordMIActionPerformed
        GetPasswordGUI gp = new GetPasswordGUI(this, true);
        gp.setLocationRelativeTo(this);
        gp.setVisible(true);
    }//GEN-LAST:event_changePasswordMIActionPerformed

    private void AboutMIActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AboutMIActionPerformed
        AboutGUI a = new AboutGUI(this, true);
        a.setLocationRelativeTo(this);
        a.setVisible(true);
    }//GEN-LAST:event_AboutMIActionPerformed

    private void guidesMIActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_guidesMIActionPerformed
        OpenURL.open("https://www.reddit.com/r/LazyMan/wiki/index");
    }//GEN-LAST:event_guidesMIActionPerformed

    private void updateMIActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateMIActionPerformed
        OpenURL.open("https://www.reddit.com/r/LazyMan/wiki/downloads");
    }//GEN-LAST:event_updateMIActionPerformed

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        CustomIP c = new CustomIP(this, true);
        c.setLocationRelativeTo(this);
        c.setVisible(true);
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        EditHosts eh = new EditHosts();

        if (eh.clearHosts(leagues)) {
            MessageBox.show("Hosts file cleared from LazyMan edits.", "Hosts File Cleared", 0);
        } else {
            MessageBox.show("Hosts file not cleared from LazyMan edits. Please check the console area.", "Hosts Not File Cleared", 2);
        }
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void qualityCBItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_qualityCBItemStateChanged
        String quality = (String) qualityCB.getSelectedItem();

        if (quality.equals("720p60")) {
            quality = "best";
        }

        for (League l : leagues) {
            l.getGwi().setQuality(quality);
        }
        Props.setBitrate(quality);
    }//GEN-LAST:event_qualityCBItemStateChanged

    private void CDNCBItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_CDNCBItemStateChanged
        if (leagues[leaguesTabbedPane.getSelectedIndex()].getGames() == null) {
            return;
        }

        String cdn = (String) CDNCB.getSelectedItem();

        if (cdn.equals("Akamai")) {
            leagues[leaguesTabbedPane.getSelectedIndex()].getGwi().setCdn("akc");
        } else {
            leagues[leaguesTabbedPane.getSelectedIndex()].getGwi().setCdn("l3c");
        }

        Props.setCDN(cdn);
    }//GEN-LAST:event_CDNCBItemStateChanged

    private void feedCBItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_feedCBItemStateChanged
        if (gettingFeeds) {
            return;
        }

        Object item = evt.getItem();

        if (!item.toString().equals("Info available later") && evt.getStateChange() == java.awt.event.ItemEvent.SELECTED && feedCB.getItemCount() >= 1) {
            enablePlayBtn();
        }
    }//GEN-LAST:event_feedCBItemStateChanged

    private void restartCBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_restartCBActionPerformed
        streamlink.restart = restartCB.isSelected();
    }//GEN-LAST:event_restartCBActionPerformed

    private void leaguesTabbedPaneStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_leaguesTabbedPaneStateChanged
        if (leagues == null) {
            return;
        }
        if (leaguesTabbedPane.getTitleAt(leaguesTabbedPane.getSelectedIndex()).equals("Log")) {
            playBtn.setEnabled(false);
            saveStreamCB.setEnabled(false);
            restartCB.setEnabled(false);
            return;
        }

        if (leagues[leaguesTabbedPane.getSelectedIndex()].getGames() != null) {
            setRow(leagues[leaguesTabbedPane.getSelectedIndex()].getSelectedGame(), leaguesTabbedPane.getSelectedIndex());
            leagues[leaguesTabbedPane.getSelectedIndex()].getGwi().setDate(leagues[leaguesTabbedPane.getSelectedIndex()].getDate());
        } else {
            feedCB.removeAllItems();
        }
        enablePlayBtn();
    }//GEN-LAST:event_leaguesTabbedPaneStateChanged

    private void MLBGameTableKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_MLBGameTableKeyReleased
        if (evt.getKeyCode() == KeyEvent.VK_UP || KeyEvent.VK_DOWN == evt.getKeyCode()) {
            MLBGameTableMouseClicked(null);
        }
    }//GEN-LAST:event_MLBGameTableKeyReleased

    private void MLBGameTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_MLBGameTableMouseClicked
        if (MLBGameTable.getModel().getValueAt(0, 0).equals("None")) {
            return;
        }

        leagues[leaguesTabbedPane.getSelectedIndex()].setSelectedGame(MLBGameTable.getSelectedRow());
        getAvailableStreams(leagues[leaguesTabbedPane.getSelectedIndex()].getSelectedGame());
        setFeed(MLBGameTable.getSelectedRow(), 'a');
        enablePlayBtn();

        if (evt != null && evt.getClickCount() == 2) {
            playBtnActionPerformed(null);
        }
    }//GEN-LAST:event_MLBGameTableMouseClicked

    private void MLBNextDayBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MLBNextDayBtnActionPerformed
        leagues[leaguesTabbedPane.getSelectedIndex()].setFavGameSelected(false);
        leagues[leaguesTabbedPane.getSelectedIndex()].setDate(Time.getNextDay(leagues[leaguesTabbedPane.getSelectedIndex()].getDate()));
        leagues[leaguesTabbedPane.getSelectedIndex()].getDateTF().setDate(Time.getDate(leagues[leaguesTabbedPane.getSelectedIndex()].getDate(), "yyyy-MM-dd"));
        leagues[leaguesTabbedPane.getSelectedIndex()].getGwi().setDate(leagues[leaguesTabbedPane.getSelectedIndex()].getDate());
        leagues[leaguesTabbedPane.getSelectedIndex()].setSelectedGame(0);
    }//GEN-LAST:event_MLBNextDayBtnActionPerformed

    private void MLBPrevDayBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MLBPrevDayBtnActionPerformed
        leagues[leaguesTabbedPane.getSelectedIndex()].setFavGameSelected(false);
        leagues[leaguesTabbedPane.getSelectedIndex()].setDate(Time.getPrevDay(leagues[leaguesTabbedPane.getSelectedIndex()].getDate()));
        leagues[leaguesTabbedPane.getSelectedIndex()].getDateTF().setDate(Time.getDate(leagues[leaguesTabbedPane.getSelectedIndex()].getDate(), "yyyy-MM-dd"));
        leagues[leaguesTabbedPane.getSelectedIndex()].getGwi().setDate(leagues[leaguesTabbedPane.getSelectedIndex()].getDate());
        leagues[leaguesTabbedPane.getSelectedIndex()].setSelectedGame(0);
    }//GEN-LAST:event_MLBPrevDayBtnActionPerformed

    private void NHLGameTableKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_NHLGameTableKeyReleased
        if (evt.getKeyCode() == KeyEvent.VK_UP || KeyEvent.VK_DOWN == evt.getKeyCode()) {
            NHLGameTableMouseClicked(null);
        }
    }//GEN-LAST:event_NHLGameTableKeyReleased

    private void NHLGameTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_NHLGameTableMouseClicked
        if (NHLGameTable.getModel().getValueAt(0, 0).equals("None")) {
            return;
        }

        leagues[leaguesTabbedPane.getSelectedIndex()].setSelectedGame(NHLGameTable.getSelectedRow());
        getAvailableStreams(leagues[leaguesTabbedPane.getSelectedIndex()].getSelectedGame());
        setFeed(NHLGameTable.getSelectedRow(), 'a');
        enablePlayBtn();

        if (evt != null && evt.getClickCount() == 2) {
            playBtnActionPerformed(null);
        }
    }//GEN-LAST:event_NHLGameTableMouseClicked

    private void refreshBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshBtnActionPerformed
        SwingWorker<Void, Void> gg;
        gg = getGames(-1, leaguesTabbedPane.getSelectedIndex());
        if (leagues[leaguesTabbedPane.getSelectedIndex()].getTimer() != null) {
            leagues[leaguesTabbedPane.getSelectedIndex()].getTimer().cancel();
            leagues[leaguesTabbedPane.getSelectedIndex()].setTimer(new Timer());
            leagues[leaguesTabbedPane.getSelectedIndex()].getTimer().scheduleAtFixedRate(new Refresh(leaguesTabbedPane.getSelectedIndex()), Props.getRefreshRate() * 60 * 1000, Props.getRefreshRate() * 60 * 1000);
        }
        gg.execute();
    }//GEN-LAST:event_refreshBtnActionPerformed

    private void NHLNextDayBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NHLNextDayBtnActionPerformed
        leagues[leaguesTabbedPane.getSelectedIndex()].setFavGameSelected(false);
        leagues[leaguesTabbedPane.getSelectedIndex()].setDate(Time.getNextDay(leagues[leaguesTabbedPane.getSelectedIndex()].getDate()));
        leagues[leaguesTabbedPane.getSelectedIndex()].getDateTF().setDate(Time.getDate(leagues[leaguesTabbedPane.getSelectedIndex()].getDate(), "yyyy-MM-dd"));
        leagues[leaguesTabbedPane.getSelectedIndex()].setSelectedGame(0);
    }//GEN-LAST:event_NHLNextDayBtnActionPerformed

    private void NHLPrevDayBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NHLPrevDayBtnActionPerformed
        leagues[leaguesTabbedPane.getSelectedIndex()].setFavGameSelected(false);
        leagues[leaguesTabbedPane.getSelectedIndex()].setDate(Time.getPrevDay(leagues[leaguesTabbedPane.getSelectedIndex()].getDate()));
        leagues[leaguesTabbedPane.getSelectedIndex()].getDateTF().setDate(Time.getDate(leagues[leaguesTabbedPane.getSelectedIndex()].getDate(), "yyyy-MM-dd"));
        leagues[leaguesTabbedPane.getSelectedIndex()].setSelectedGame(0);
    }//GEN-LAST:event_NHLPrevDayBtnActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        SwingWorker<Void, Void> w = waiting();
        w.execute();
        InfiniteBar ub = new InfiniteBar(null, true, "Waiting for proxy to close then exiting...");
        ub.setLocationRelativeTo(null);
        ub.setVisible(true);
    }//GEN-LAST:event_formWindowClosing

    private void donateMIMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_donateMIMouseClicked
        OpenURL.open("https://streamlabs.com/stevensnjd4/");
    }//GEN-LAST:event_donateMIMouseClicked

    private void refreshBtn1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshBtn1ActionPerformed
        refreshBtnActionPerformed(evt);
    }//GEN-LAST:event_refreshBtn1ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem AboutMI;
    private javax.swing.JComboBox<String> CDNCB;
    private com.toedter.calendar.JDateChooser MLBDateTF;
    private javax.swing.JTable MLBGameTable;
    private javax.swing.JButton MLBNextDayBtn;
    private javax.swing.JButton MLBPrevDayBtn;
    private com.toedter.calendar.JDateChooser NHLDateTF;
    private javax.swing.JTable NHLGameTable;
    private javax.swing.JButton NHLNextDayBtn;
    private javax.swing.JButton NHLPrevDayBtn;
    private javax.swing.JMenuItem changePasswordMI;
    private javax.swing.JPopupMenu consolePM;
    private javax.swing.JPanel consolePanel;
    private javax.swing.JScrollPane consoleScrollPane;
    private javax.swing.JTextPane consoleTA;
    private javax.swing.JMenu donateMI;
    private javax.swing.JMenuItem exitMI;
    private javax.swing.JComboBox<String> feedCB;
    private javax.swing.JPanel gameSelectionPanel;
    private javax.swing.JMenuItem guidesMI;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JProgressBar jProgressBar1;
    private javax.swing.JTabbedPane leaguesTabbedPane;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JPanel mlbDateSelectionPanel;
    private javax.swing.JPanel mlbPanel;
    private javax.swing.JScrollPane mlbScrollPanel;
    private javax.swing.JPanel nhlDateSelectionPanel;
    private javax.swing.JPanel nhlPanel;
    private javax.swing.JScrollPane nhlScrollPanel;
    private javax.swing.JPanel playActionPanel;
    private javax.swing.JButton playBtn;
    private javax.swing.JPanel playOptionSelectionsPanel;
    private javax.swing.JPanel playOptionsPanel;
    private javax.swing.JMenuItem preferencesMI;
    private javax.swing.JComboBox<String> qualityCB;
    private javax.swing.JButton refreshBtn;
    private javax.swing.JButton refreshBtn1;
    private javax.swing.JCheckBox restartCB;
    private javax.swing.JCheckBox saveStreamCB;
    private javax.swing.JMenuItem updateMI;
    // End of variables declaration//GEN-END:variables

    class newDay extends Thread {

        @Override
        public void run() {
            while (true) {
                try {
                    Thread.sleep(Time.nextDay());
                    for (int i = 0; i < leaguesTabbedPane.getTabCount() - 1; i++) {
                        leagues[i].setDate(Time.getPSTDate("yyyy-MM-dd"));
                        leagues[i].getDateTF().setDate(Time.getPSTDate1("MMM dd, yyyy"));
                        leagues[i].getGwi().setDate(leagues[i].getDate());
                    }
                } catch (InterruptedException ex) {
                    ex.printStackTrace();
                }
            }
        }

    }

    private SwingWorker<Void, Void> updating() {

        SwingWorker<Void, Void> worker;
        worker = new SwingWorker<Void, Void>() {
            @Override
            protected Void doInBackground() throws Exception {
                InfiniteBar ub = new InfiniteBar(null, true, "Updating...");
                ub.setLocationRelativeTo(null);
                ub.setVisible(true);
                return null;
            }
        };
        return worker;

    }

    private SwingWorker<Void, Void> waiting() {

        SwingWorker<Void, Void> worker;
        worker = new SwingWorker<Void, Void>() {
            @Override
            protected Void doInBackground() throws Exception {
                while (p.isRunning()) {
                    p.kill();
                }

                System.exit(0);
                return null;
            }
        };
        return worker;

    }

    private SwingWorker<Void, Void> getGames(final int row, int lg) {
        SwingWorker<Void, Void> worker = new SwingWorker<Void, Void>() {

            @Override
            protected Void doInBackground() throws Exception {
                if (leaguesTabbedPane.getSelectedIndex() == 2) {
                    return null;
                }
                try {
                    DefaultTableModel model = (DefaultTableModel) leagues[lg].getTable().getModel();
                    model.setRowCount(0);

                    leagues[lg].setGames(leagues[lg].getDate());

                    if (leagues[lg].getGames() != null && leagues[lg].getGames().length > 0) {
                        if (Time.isToday(leagues[lg].getDate()) && Props.getRefreshRate() > 0 && leagues[lg].getTimer() == null) {
                            leagues[lg].setTimer(new Timer());
                            leagues[lg].getTimer().scheduleAtFixedRate(new Refresh(lg), Props.getRefreshRate() * 60 * 1000, Props.getRefreshRate() * 60 * 1000);
                        } else if (leagues[lg].getTimer() != null && !Time.isToday(leagues[lg].getDate())) {
                            leagues[lg].getTimer().cancel();
                            leagues[lg].setTimer(null);
                        }
                        String time;

                        for (Game g1 : leagues[lg].getGames()) {
                            if (g1.getTimeRemaining().equalsIgnoreCase("n/a")) {
                                time = Time.toLocalTZ(g1.getDate() + " " + g1.getTime(), "UTC", "yyyy-MM-dd H:mm");
                            } else {
                                time = g1.getTimeRemaining();
                            }
                            model.addRow(new Object[]{g1.getAwayTeamFull(),
                                g1.getHomeTeamFull(),
                                time});
                        }
                        leagues[lg].getTable().setModel(model);

                        if (row != -1) {
                            leagues[lg].setSelectedGame(setRow(row, lg));
                        } else if (leaguesTabbedPane.getTitleAt(lg).equals(leagues[leaguesTabbedPane.getSelectedIndex()].getName())) {
                            setRow(row, lg);
                        }

                        leagues[lg].getGwi().setDate(leagues[lg].getDate());
                        enablePlayBtn();

                    } else if (leagues[lg].getGames() == null) {
                        model.setRowCount(0);
                        model.addRow(new Object[]{"None", "None", "None"});
                        if (leagues[leaguesTabbedPane.getSelectedIndex()].getTimer() != null) {
                            leagues[leaguesTabbedPane.getSelectedIndex()].getTimer().cancel();
                            leagues[leaguesTabbedPane.getSelectedIndex()].setTimer(null);
                        }
                        if (leaguesTabbedPane.getTitleAt(lg).equals(leagues[leaguesTabbedPane.getSelectedIndex()].getName())) {
                            playBtn.setEnabled(false);
                        }
                    }

                } catch (Exception e) {
                    // TODO Auto-generated catch block
                    e.printStackTrace();
                }

                return null;

            }

        };
        return worker;
    }

    private String getFavTeamIndex(String team, int lg) {
        for (int i = 0; i < leagues[lg].getGames().length; i++) {
            if ((leagues[lg].getGames()[i].getAwayTeam()).equals(team)) {
                if (leagues[lg].getGames()[i].getGameState().contains("Pre") || leagues[lg].getGames()[i].getGameState().contains("In Progress") || leagues[lg].getGames()[i].getGameState().contains("Final")) {
                    if (leagues[leaguesTabbedPane.getSelectedIndex()].getGames()[i].contains("AWAY")) {
                        return i + "a";
                    }
                    return i + "n";
                }
                return "-1n";
            }
            if (leagues[lg].getGames()[i].getHomeTeam().equals(team)) {
                if (leagues[lg].getGames()[i].getGameState().contains("Pre") || leagues[lg].getGames()[i].getGameState().contains("In Progress") || leagues[lg].getGames()[i].getGameState().contains("Final")) {
                    if (leagues[leaguesTabbedPane.getSelectedIndex()].getGames()[i].contains("HOME")) {
                        return i + "h";
                    }
                    return i + "n";
                }
                return "-1n";
            }
        }
        return "-1n";
    }

    private int setRow(int row, int lg) {
        if (row != -1) {
            if (leaguesTabbedPane.getTitleAt(lg).equals(leagues[leaguesTabbedPane.getSelectedIndex()].getName()) && (!leagues[lg].getFavoriteTeam().equals("") || !leagues[lg].getFavoriteTeam().equals("None")) && !leagues[lg].isFavGameSelected()) {
                String index = getFavTeamIndex(leagues[lg].getFavoriteTeam(), lg);
                int idx = Integer.parseInt(index.substring(0, index.length() - 1));
                char homeOrAway = index.charAt(index.length() - 1);

                if (idx != -1) {
                    if (leaguesTabbedPane.getTitleAt(lg).equals(leagues[leaguesTabbedPane.getSelectedIndex()].getName())) {
                        getAvailableStreams(idx);
                        setFeed(idx, homeOrAway);
                    }
                    if (leaguesTabbedPane.getTitleAt(lg).equals(leagues[leaguesTabbedPane.getSelectedIndex()].getName())) {
                        leagues[lg].getTable().setRowSelectionInterval(idx, idx);
                        leagues[lg].setFavGameSelected(true);
                    }
                    return idx;
                }
            }

            if (leaguesTabbedPane.getTitleAt(lg).equals(leagues[leaguesTabbedPane.getSelectedIndex()].getName())) {
                getAvailableStreams(row);
                setFeed(row, 'a');
            }

            if (leaguesTabbedPane.getTitleAt(lg).equals(leagues[leaguesTabbedPane.getSelectedIndex()].getName())) {
                leagues[lg].getTable().setRowSelectionInterval(row, row);
            }
        } else if (leaguesTabbedPane.getTitleAt(lg).equals(leagues[leaguesTabbedPane.getSelectedIndex()].getName())) {
            leagues[lg].getTable().setRowSelectionInterval(leagues[lg].getSelectedGame(), leagues[lg].getSelectedGame());
        }

        return row;
    }

    private void setFeed(int idx, char homeOrAway) {
        if (leagues[leaguesTabbedPane.getSelectedIndex()].isFavGameSelected() || leagues[leaguesTabbedPane.getSelectedIndex()].getGames()[idx].getNumOfFeeds() < 1) {
            return;
        }
        switch (homeOrAway) {
            case 'a':
                if ("1".equals(Props.getPreferFrench()) && leagues[leaguesTabbedPane.getSelectedIndex()].getGames()[idx].contains("FRENCH")) {
                    feedCB.setSelectedIndex(leagues[leaguesTabbedPane.getSelectedIndex()].getGames()[idx].getFeedIndex("FRENCH"));
                } else if (leagues[leaguesTabbedPane.getSelectedIndex()].getGames()[idx].contains("AWAY")) {
                    try {
                        feedCB.setSelectedIndex(1);
                    } catch (Exception e) {
                    }
                } else {
                    feedCB.setSelectedIndex(0);
                }
                break;
            case 'h':
                if ("1".equals(Props.getPreferFrench()) && leagues[leaguesTabbedPane.getSelectedIndex()].getGames()[idx].contains("FRENCH")) {
                    feedCB.setSelectedIndex(leagues[leaguesTabbedPane.getSelectedIndex()].getGames()[idx].getFeedIndex("FRENCH"));
                } else {
                    try {
                        feedCB.setSelectedIndex(0);
                    } catch (Exception e) {
                    }
                }
        }
    }

    private void getAvailableStreams(int row) {
        gettingFeeds = true;
        feedCB.removeAllItems();
        if (leagues[leaguesTabbedPane.getSelectedIndex()].getGames()[row].getNumOfFeeds() > 0) {
            for (int i = 0; i < leagues[leaguesTabbedPane.getSelectedIndex()].getGames()[row].getNumOfFeeds(); i++) {
                if (!leagues[leaguesTabbedPane.getSelectedIndex()].getGames()[row].getFeedTV(i).isEmpty()) {
                    feedCB.addItem(leagues[leaguesTabbedPane.getSelectedIndex()].getGames()[row].getFeedName(i) + " (" + leagues[leaguesTabbedPane.getSelectedIndex()].getGames()[row].getFeedTV(i) + ")");
                } else {
                    feedCB.addItem(leagues[leaguesTabbedPane.getSelectedIndex()].getGames()[row].getFeedName(i));
                }
            }
        }
        gettingFeeds = false;
    }

    private boolean checkID(String id) {
        if (id == null) {
            return false;
        }
        return leagues[leaguesTabbedPane.getSelectedIndex()].getGwi().setUrl(getMediaID(), leagues[leaguesTabbedPane.getSelectedIndex()].getName());
    }

    private void enablePlayBtn() {
        if (leagues[leaguesTabbedPane.getSelectedIndex()].getGames() == null) {
            playBtn.setEnabled(false);
            saveStreamCB.setEnabled(false);

            if (saveStreamCB.isSelected()) {
                saveStreamCB.setSelected(false);
                playBtn.setText("Play");
                streamlink.record = false;
            }
            return;
        }
        int idx = leagues[leaguesTabbedPane.getSelectedIndex()].getSelectedGame();
        if (leagues[leaguesTabbedPane.getSelectedIndex()].getGames()[idx].getNumOfFeeds() < 1) {
            playBtn.setEnabled(false);
            return;
        }
        if (leagues[leaguesTabbedPane.getSelectedIndex()].getStreamlinkSwitch() < 1) {
            String d = Time.toLocalTZ(leagues[leaguesTabbedPane.getSelectedIndex()].getDate(), "America/Los_Angeles", "yyyy-MM-dd", "yyyy-MM-dd");
            boolean e = (leagues[leaguesTabbedPane.getSelectedIndex()].getGames()[idx].getGameState().contains("In Progress") || leagues[leaguesTabbedPane.getSelectedIndex()].getGames()[idx].getGameState().equals("Final")) || Time.isXMinBeforeGame(d + " " + Time.toLocalTZ(leagues[leaguesTabbedPane.getSelectedIndex()].getGames()[idx].getTime(), "UTC", "H:mm"), 40);

            if (e) {
                e = e && checkID(leagues[leaguesTabbedPane.getSelectedIndex()].getGames()[idx].getFeedID(feedCB.getSelectedIndex()));
            }
            playBtn.setEnabled(e);

            if (!e && saveStreamCB.isSelected()) {
                saveStreamCB.setSelected(false);
                playBtn.setText("Play");
                streamlink.record = false;
            }
            saveStreamCB.setEnabled(e);
        } else {
            playBtn.setText("Stop Recording");
            playBtn.setEnabled(true);
            saveStreamCB.setEnabled(true);
            saveStreamCB.setSelected(true);
        }

        restartCB.setEnabled(leagues[leaguesTabbedPane.getSelectedIndex()].getGames()[idx].getGameState().contains("In Progress"));

        if (!leagues[leaguesTabbedPane.getSelectedIndex()].getPlaybackIDs().isEmpty()) {
            leagues[leaguesTabbedPane.getSelectedIndex()].getPlaybackIDs().clear();
        }
    }

    private SwingWorker<Void, Void> playGame(int lg) {

        SwingWorker<Void, Void> worker;
        worker = new SwingWorker<Void, Void>() {

            @Override
            protected Void doInBackground() {
                if (!p.isReady()) {
                    MessageBox.show("Could not start proxy.", "Proxy not running", 2);
                    jProgressBar1.setIndeterminate(false);
                    return null;
                }
                try {
                    if (!Props.getVlcloc().equals("")) {
                        Process l;
                        int idx = leagues[lg].getSelectedGame();
                        l = streamlink.run(leagues[lg].getGames()[idx], leagues[lg].getGwi(), p.getPort());
                        boolean opened = false;

                        if (l != null) {
                            SwingWorker<Void, Void> go = getSLOutput(l);
                            go.execute();

                            System.out.print("\n-----\n");
                            System.out.println("Streamlink starting...\n");

                            while (l.isAlive()) {
                                if (!opened) {
                                    int li = consoleTA.getText().lastIndexOf("-----");
                                    if (consoleTA.getText().substring(li, consoleTA.getText().length()).contains("Starting")) {
                                        jProgressBar1.setIndeterminate(false);
                                        opened = true;
                                        streamCnt++;
                                    }
                                }
                                Thread.sleep(700);
                                if (leagues[lg].getStreamlinkSwitch() == -1) {
                                    l.destroy();
                                }
                            }
                            l.waitFor();
                            System.out.println("Streamlink done");
                            jProgressBar1.setIndeterminate(false);
                            streamCnt--;

                            if (!opened) {
                                MessageBox.show("Stream unavailable. Please report the game you are trying to play.", "Error", 2);
                            }
                        } else if (playBtn.getText().equals("Stop Recording")) {
                            leagues[lg].setStreamlinkSwitch(-1);

                            if (saveStreamCB.isSelected()) {
                                playBtn.setText("Record");
                            } else {
                                playBtn.setText("Play");
                            }
                        }
                    } else {
                        String message = "Please set the location to your media player executable in Edit > Preferences.";
                        MessageBox.show(message, "Error", 2);
                        jProgressBar1.setIndeterminate(false);
                    }
                    playBtn.setEnabled(true);
                } catch (Exception ex) {
                    ex.printStackTrace();
                }
                return null;

            }

        };
        return worker;
    }

    private void getSLLoc() {
        if (System.getProperty("os.name").toLowerCase().contains("win")) {
            String ls = "streamlink\\streamlink.exe";
            java.io.File f = new java.io.File(ls);
            if (f.exists()) {
                streamlink.setLocation(ls);
            } else {
                MessageBox.show("Could not find Streamlink. Please extract the folder comtaining Streamlink to the same folder as LazyMan.", "Error", 2);
            }
        } else {
            String ls;
            if (System.getProperty("os.name").toLowerCase().contains("mac")) {
                ls = "/usr/local/bin/streamlink";
            } else {
                ls = "streamlink";
            }
            if (cmdExists(ls)) {
                streamlink.setLocation(ls);
            } else {
                MessageBox.show("Could not find Streamlink. Please follow the guide on how to install it.", "Error", 2);
            }
        }
    }

    private boolean cmdExists(String cmd) {
        String output;
        try {
            output = ProcessReader.getProcessOutput(new ProcessBuilder("/bin/sh", "-c", cmd).redirectErrorStream(true).start()).toLowerCase();
        } catch (IOException ex) {
            ex.printStackTrace();
            return false;
        }

        return !(output.equals("")
                || output.contains("not found")
                || output.contains("no file")
                || output.contains("no such"));
    }

    private void setButtons() {
        String bitrate = Props.getBitrate(), cdn = Props.getCDN();

        if (!bitrate.equals("")) {
            if (!bitrate.equals("best")) {
                qualityCB.setSelectedItem(bitrate);
            } else {
                qualityCB.setSelectedItem("720p60");
            }
        } else {
            qualityCB.setSelectedItem("720p");
        }
        if (!cdn.equals("")) {
            CDNCB.setSelectedItem(cdn);
        } else {
            CDNCB.setSelectedItem("Akamai");
        }
        for (League l : leagues) {
            if (!bitrate.equals("")) {
                l.getGwi().setQuality(bitrate);
            } else {
                l.getGwi().setQuality("720p");
            }

            if (!cdn.equals("")) {
                if (cdn.equals("Akamai")) {
                    l.getGwi().setCdn("akc");
                } else {
                    l.getGwi().setCdn("l3c");
                }
            } else {
                l.getGwi().setCdn("akc");
            }
        }
    }

    private String getMediaID() {
        return leagues[leaguesTabbedPane.getSelectedIndex()].getGames()[leagues[leaguesTabbedPane.getSelectedIndex()].getSelectedGame()].getFeedID(feedCB.getSelectedIndex());
    }

    private void checkUpdate() {
        try (Scanner s = new Scanner(getClass().getResourceAsStream("/VERSION.txt"))) {
            String[] ver = s.nextLine().split("\\.");
            int major = Integer.parseInt(ver[0]), minor = Integer.parseInt(ver[1]), patch = Integer.parseInt(ver[2]), build = Integer.parseInt(ver[3].replace(" BETA", ""));
            int curMajor, curMinor, curPatch, curBuild;
            String version;
            try {
                version = Web.getContent("https://raw.githubusercontent.com/StevensNJD4/LazyMan/master/VERSION").trim();
                String[] curVer = version.split("\\.");
                curMajor = Integer.parseInt(curVer[0]);
                curMinor = Integer.parseInt(curVer[1]);
                curPatch = Integer.parseInt(curVer[2]);
                curBuild = Integer.parseInt(curVer[3]);
            } catch (UnknownHostException | NumberFormatException ex) {
                return;
            }

            if (!ver[3].contains("BETA")) {
                if (curMajor > major || (curMajor == major && curMinor > minor) || (curMajor == major && curMinor >= minor && curPatch > patch) || (curMajor == major && curMinor >= minor && curPatch >= patch && curBuild > build)) {
                    if (MessageBox.ask("New update available!\nWould you like to update?", "New Update!") == MessageBox.yesOption()) {
                        SwingWorker<Void, Void> u = updating();
                        u.execute();
                        if (AutoUpdate.download(version)) {
                            if (AutoUpdate.unZipIt()) {
                                String loc;

                                if (!System.getProperty("os.name").toLowerCase().contains("linux")) {
                                    loc = Paths.get(".").toAbsolutePath().normalize().toString() + System.getProperty("file.separator");
                                    if (System.getProperty("os.name").toLowerCase().contains("win")) {
                                        loc += "LazyMan.exe";
                                    } else {
                                        loc += "LazyMan.jar";
                                    }
                                } else {
                                    loc = new java.io.File(Props.class.getProtectionDomain().getCodeSource().getLocation().getPath()).getParent() + System.getProperty("file.separator") + "LazyMan.jar";
                                }
                                Runtime.getRuntime().exec("java -jar " + loc);
                                System.exit(0);
                            }
                        }
                        MessageBox.show("Could not automatically update. Please manually update", version, build);
                    }
                } else {
                    updateMI.setVisible(false);
                }
            } else {
                if (curMajor > major || (curMajor == major && curMinor > minor) || (curMajor == major && curMinor >= minor && curPatch > patch) || (curMajor == major && curMinor >= minor && curPatch >= patch && curBuild > build)) {
                    if (MessageBox.ask("New stable update available!\nWould you like to update", "New Update!") == MessageBox.yesOption()) {
                        SwingWorker<Void, Void> u = updating();
                        u.execute();
                        if (AutoUpdate.download(version)) {
                            if (AutoUpdate.unZipIt()) {
                                String loc;

                                if (!System.getProperty("os.name").toLowerCase().contains("linux")) {
                                    loc = Paths.get(".").toAbsolutePath().normalize().toString() + System.getProperty("file.separator");
                                    if (System.getProperty("os.name").toLowerCase().contains("win")) {
                                        loc += "LazyMan.exe";
                                    } else {
                                        loc += "LazyMan.jar";
                                    }
                                } else {
                                    loc = new java.io.File(Props.class.getProtectionDomain().getCodeSource().getLocation().getPath()).getParent() + System.getProperty("file.separator") + "LazyMan.jar";
                                }
                                Runtime.getRuntime().exec("java -jar " + loc);
                                System.exit(0);
                            }
                        }
                        MessageBox.show("Could not automatically update. Please manually update.", "Could not automatically update", 2);
                    }
                } else {
                    version = Web.getContent("https://raw.githubusercontent.com/StevensNJD4/LazyMan/master/VERSIONBETA").replace(" BETA", "").trim();
                    String[] curVerB = version.split("\\.");
                    int curMajorB = Integer.parseInt(curVerB[0]), curMinorB = Integer.parseInt(curVerB[1]), curPatchB = Integer.parseInt(curVerB[2]), curBuildB = Integer.parseInt(curVerB[3]);
                    if (curMajorB > major || (curMajorB == major && curMinorB > minor) || (curMajorB == major && curMinorB >= minor && curPatchB > patch) || (curMajorB == major && curMinorB >= minor && curPatchB >= patch && curBuildB > build)) {
                        if (MessageBox.ask("New beta update available!\nWould you like to update?", "New Update!") == MessageBox.yesOption()) {
                            SwingWorker<Void, Void> u = updating();
                            u.execute();
                            if (AutoUpdate.download(version)) {
                                if (AutoUpdate.unZipIt()) {
                                    String loc;

                                    if (!System.getProperty("os.name").toLowerCase().contains("linux")) {
                                        loc = Paths.get(".").toAbsolutePath().normalize().toString() + System.getProperty("file.separator");
                                        if (System.getProperty("os.name").toLowerCase().contains("win")) {
                                            loc += "LazyMan.exe";
                                        } else {
                                            loc += "LazyMan.jar";
                                        }
                                    } else {
                                        loc = new java.io.File(Props.class.getProtectionDomain().getCodeSource().getLocation().getPath()).getParent() + System.getProperty("file.separator") + "LazyMan.jar";
                                    }
                                    Runtime.getRuntime().exec("java -jar " + loc);
                                    System.exit(0);
                                }
                            }
                            MessageBox.show("Could not automatically update. Please manually update.", "Could not automatically update", 2);
                        }
                    } else {
                        updateMI.setVisible(false);
                    }
                }
            }
        } catch (UnknownHostException uhe) {
            MessageBox.show("You are either offline or GitHub is down to check for updates.", "Error", 2);
        } catch (IOException ex) {
            ex.printStackTrace();
        }
    }

    class Refresh extends TimerTask {

        private final int lg;

        public Refresh(int lg) {
            this.lg = lg;
        }

        @Override
        public void run() {
            SwingWorker<Void, Void> gg;
            gg = getGames(-1, lg);
            gg.execute();
        }
    }

    private SwingWorker<Void, Void> getSLOutput(final Process p) {

        SwingWorker<Void, Void> worker;
        worker = new SwingWorker<Void, Void>() {

            @Override
            protected Void doInBackground() {
                try {
                    ProcessReader.putProcessOutput(p, consoleTA);
                } catch (Exception ex) {
                    ex.printStackTrace();
                }
                return null;

            }

        };
        return worker;
    }

    private SwingWorker<Void, Void> getMitmOutput(final Process p) {

        SwingWorker<Void, Void> worker;
        worker = new SwingWorker<Void, Void>() {

            @Override
            protected Void doInBackground() {
                try {
                    ProcessReader.keepProcessWorking(p);
                } catch (Exception ex) {
                    ex.printStackTrace();
                }
                return null;

            }

        };
        return worker;
    }

    public void getVLCLocation() {
        String loc;
        java.io.File file;
        loc = Props.getVlcloc();

        if (loc.equals("")) {
            if (System.getProperty("os.name").toLowerCase().contains("win")) {
                loc = "C:\\Program Files\\VideoLAN\\VLC\\vlc.exe";
                file = new java.io.File(loc);
                if (file.exists()) {
                    Props.setVlcloc(loc);
                } else {
                    loc = "C:\\Program Files (x86)\\VideoLAN\\VLC\\vlc.exe";
                    file = new java.io.File(loc);
                    if (file.exists()) {
                        Props.setVlcloc(loc);
                    }
                }
            } else if (System.getProperty("os.name").toLowerCase().contains("mac")) {
                loc = "/Applications/VLC.app/Contents/MacOS/VLC";
                file = new java.io.File(loc);
                if (file.exists()) {
                    Props.setVlcloc(loc);
                }
            } else {
                loc = "/usr/bin/vlc";
                file = new java.io.File(loc);
                if (file.exists()) {
                    Props.setVlcloc(loc);
                }
            }
        }
    }
}
